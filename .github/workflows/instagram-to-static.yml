name: Instagram → Static media.json
on:
  schedule: [{ cron: "0 3 * * *" }]   # daily at 03:00 UTC
  workflow_dispatch: {}               # allow manual run

permissions:
  contents: write

jobs:
  build-media-json:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          persist-credentials: true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Instaloader
        run: pip install instaloader

      # ✅ Correct Instaloader usage: pass the USERNAME only.
      # ✅ Removed the invalid --slide and the "profile" keyword.
      - name: Fetch latest posts from public profile
        run: |
          rm -rf scraped && mkdir -p scraped
          instaloader --no-captions --no-video-thumbnails \
            --dirname-pattern scraped --fast-update \
            --count 30 "ravandeh.std" || true

      # Build media.json at repo root with RELATIVE paths (work on GH Pages)
      - name: Build media.json (relative paths, tolerant to JSON variations)
        run: |
          python - << 'PY'
          import json, os, glob, datetime, re

          def first_json_in(d):
              js = sorted(glob.glob(os.path.join(d, "*.json")))
              return js[0] if js else None

          def read_meta(p):
              if not p: return {}
              try:
                  with open(p, "r", encoding="utf-8") as f:
                      return json.load(f)
              except Exception:
                  return {}

          out = []
          for postdir in sorted(glob.glob("scraped/*")):
              # find an image
              imgs = sorted([p for p in os.listdir(postdir)
                             if p.lower().endswith((".jpg",".jpeg",".png",".webp"))])
              if not imgs:
                  continue
              img_path = f"{postdir}/{imgs[0]}".replace("\\","/")
              meta = read_meta(first_json_in(postdir))

              # shortcode if present
              node = meta.get("node", {})
              shortcode = (meta.get("shortcode") or node.get("shortcode") or "")

              # caption if present
              caption = ""
              edges = node.get("edge_media_to_caption", {}).get("edges", [])
              if edges and isinstance(edges, list) and edges[0].get("node"):
                  caption = edges[0]["node"].get("text", "")
              else:
                  caption = meta.get("caption", "") or ""

              # timestamp if present
              ts = meta.get("taken_at_timestamp") or meta.get("date_local") or meta.get("date_utc")
              if isinstance(ts, (int, float)):
                  timestamp = datetime.datetime.utcfromtimestamp(ts).isoformat() + "Z"
              else:
                  # try to parse from folder name like '2025-09-...'
                  m = re.search(r"(20\\d{2}-\\d{2}-\\d{2})", postdir)
                  if m:
                      try:
                          timestamp = datetime.datetime.fromisoformat(m.group(1)).isoformat() + "Z"
                      except Exception:
                          timestamp = datetime.datetime.utcnow().isoformat() + "Z"
                  else:
                      timestamp = datetime.datetime.utcnow().isoformat() + "Z"

              permalink = f"https://www.instagram.com/p/{shortcode}/" if shortcode else "https://www.instagram.com/ravandeh.std/"

              out.append({
                  "id": meta.get("id") or shortcode or img_path,
                  "caption": caption,
                  "media_url": img_path,        # RELATIVE (no leading slash)
                  "permalink": permalink,
                  "media_type": "IMAGE",
                  "timestamp": timestamp
              })

          # newest first
          out.sort(key=lambda x: x["timestamp"], reverse=True)

          # write to repo root
          with open("media.json","w",encoding="utf-8") as f:
              json.dump(out, f, ensure_ascii=False, indent=2)
          PY

      - name: Commit & push
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A
          git commit -m "Update media.json + scraped images" || echo "No changes to commit"
          git push origin HEAD:main
